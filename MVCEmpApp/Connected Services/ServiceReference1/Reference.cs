//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCEmpApp.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyEmpService")]
    public interface IMyEmpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/GetAllUser", ReplyAction="http://tempuri.org/IMyEmpService/GetAllUserResponse")]
        EmployeeServiceApp.Employee[] GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/GetAllUser", ReplyAction="http://tempuri.org/IMyEmpService/GetAllUserResponse")]
        System.Threading.Tasks.Task<EmployeeServiceApp.Employee[]> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/AddUser", ReplyAction="http://tempuri.org/IMyEmpService/AddUserResponse")]
        int AddUser(int ID, string FName, string LName, string Email, string Designation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/AddUser", ReplyAction="http://tempuri.org/IMyEmpService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(int ID, string FName, string LName, string Email, string Designation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/GetAllUserById", ReplyAction="http://tempuri.org/IMyEmpService/GetAllUserByIdResponse")]
        EmployeeServiceApp.Employee GetAllUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/GetAllUserById", ReplyAction="http://tempuri.org/IMyEmpService/GetAllUserByIdResponse")]
        System.Threading.Tasks.Task<EmployeeServiceApp.Employee> GetAllUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/UpdateUser", ReplyAction="http://tempuri.org/IMyEmpService/UpdateUserResponse")]
        int UpdateUser(int Id, string FName, string LName, string Email, string Designation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/UpdateUser", ReplyAction="http://tempuri.org/IMyEmpService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(int Id, string FName, string LName, string Email, string Designation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/DeleteUserById", ReplyAction="http://tempuri.org/IMyEmpService/DeleteUserByIdResponse")]
        int DeleteUserById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyEmpService/DeleteUserById", ReplyAction="http://tempuri.org/IMyEmpService/DeleteUserByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteUserByIdAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyEmpServiceChannel : MVCEmpApp.ServiceReference1.IMyEmpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyEmpServiceClient : System.ServiceModel.ClientBase<MVCEmpApp.ServiceReference1.IMyEmpService>, MVCEmpApp.ServiceReference1.IMyEmpService {
        
        public MyEmpServiceClient() {
        }
        
        public MyEmpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyEmpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyEmpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyEmpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmployeeServiceApp.Employee[] GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<EmployeeServiceApp.Employee[]> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public int AddUser(int ID, string FName, string LName, string Email, string Designation) {
            return base.Channel.AddUser(ID, FName, LName, Email, Designation);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(int ID, string FName, string LName, string Email, string Designation) {
            return base.Channel.AddUserAsync(ID, FName, LName, Email, Designation);
        }
        
        public EmployeeServiceApp.Employee GetAllUserById(int id) {
            return base.Channel.GetAllUserById(id);
        }
        
        public System.Threading.Tasks.Task<EmployeeServiceApp.Employee> GetAllUserByIdAsync(int id) {
            return base.Channel.GetAllUserByIdAsync(id);
        }
        
        public int UpdateUser(int Id, string FName, string LName, string Email, string Designation) {
            return base.Channel.UpdateUser(Id, FName, LName, Email, Designation);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(int Id, string FName, string LName, string Email, string Designation) {
            return base.Channel.UpdateUserAsync(Id, FName, LName, Email, Designation);
        }
        
        public int DeleteUserById(int Id) {
            return base.Channel.DeleteUserById(Id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserByIdAsync(int Id) {
            return base.Channel.DeleteUserByIdAsync(Id);
        }
    }
}
